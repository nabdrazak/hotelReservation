package com.lautbiru;

import com.lautbiru.controller.GuestController;
import com.lautbiru.model.GuestModel;
import com.lautbiru.utils.DateUtils;
import com.lautbiru.view.GuestView;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import org.apache.commons.lang3.RandomStringUtils;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

public class StorageDemo3 implements HttpHandler {
    Map<String, CustomerModel> customerModels;

    Properties props = new Properties();

    public StorageDemo3() {
        customerModels = new HashMap();
        try {
            props.load(ClassLoader.getSystemResourceAsStream("application.properties"));
        } catch (Exception e) {
            System.out.println("****** Application Properties is empty **************");
        }
    }

    @Override
    public void handle(HttpExchange httpExchange) throws IOException {
        System.out.println("Total Hotel Rooms is -> "+props.getProperty("total.hotel.rooms"));
        String response = "Hello World";
        httpExchange.sendResponseHeaders(200, response.length());
        OutputStream os = httpExchange.getResponseBody();
        os.write(response.getBytes());
        steps();
        os.close();
    }

    public void steps() {
        addCustomer("Hamdan Zambri Adnan", "2024-07-25");
        addCustomer("Akhnut Antari", "2024-05-30");
        addCustomer("Zaharah Awang", "2024-08-25");
        addCustomer("Muhammad Afnan Zain", "2024-06-25");
        displayCustomersRecord();
    }

    public void displayCustomersRecord() {
        System.out.println("\n\n");
        for (Map.Entry<String, CustomerModel> entry: customerModels.entrySet()) {
            CustomerModel guestModel = entry.getValue();
            CustomerController guestController = new CustomerController(guestModel, new CustomerView());
            guestController.viewBooking();
        }
    }

    public void addCustomer(String name, String date) {
        boolean validBookId = false;
        boolean isRoomExist = false;
        String bookingId;
        int roomNo;

        List<String> bookingNumbers = new ArrayList();
        List<Integer> bookedRooms = new ArrayList<>();
        for (Map.Entry<String, CustomerModel> entry : customerModels.entrySet()) {
            bookingNumbers.add(entry.getValue().getBookingId());
            bookedRooms.add(entry.getValue().getRoomNo());
        }

        do {
            bookingId = RandomStringUtils.random(8, true, true);
            if(!bookingNumbers.contains(bookingId))
                validBookId = true;
        } while (!validBookId);

        do {
            roomNo = new Random().nextInt(25);
            if(!bookedRooms.contains(roomNo))
                isRoomExist = true;
        } while (!isRoomExist);

        CustomerModel guestModel = new CustomerModel();
        CustomerController guestController1 = new CustomerController(guestModel, new CustomerView());
        guestController1.setBookingId(bookingId);
        guestController1.setCustomerName(name);
        guestController1.setRoomNumber(roomNo);
        guestController1.setBookingDate(DateUtils.createDate(date));
        customerModels.put(guestModel.getBookingId(), guestModel);
    }

}
